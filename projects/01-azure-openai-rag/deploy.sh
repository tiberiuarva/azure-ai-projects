#!/usr/bin/env bash
set -euo pipefail

# ==== CONFIG ====
SUBSCRIPTION_ID="bfd8500c-73fd-46d1-bf00-73523502d6d3"
LOCATION="westeurope"
RESOURCE_GROUP="rg-aoai-rag-demo-001"
UNIQUE_ID=$(date +%s | sha256sum | base64 | head -c 5)
NAME_PREFIX="demo-${UNIQUE_ID}-"

MODEL_NAME="gpt-4o-mini"
MODEL_VERSION="2024-07-18"
DEPLOYMENT_NAME="gpt4oMini"
DEPLOYMENT_CAPACITY=1
DEPLOYMENT_SKU="GlobalStandard"
CUSTOM_DOMAIN_NAME=$(printf "%s" "${NAME_PREFIX}aoai" | tr '[:upper:]' '[:lower:]')

# Parameters for Bicep deployment
deployment_parameters=(
  location="$LOCATION"
  namePrefix="$NAME_PREFIX"
  modelName="$MODEL_NAME"
  modelVersion="$MODEL_VERSION"
  deploymentName="$DEPLOYMENT_NAME"
  deploymentCapacity=$DEPLOYMENT_CAPACITY
  deploymentSkuName="$DEPLOYMENT_SKU"
  openAiCustomDomainName="$CUSTOM_DOMAIN_NAME"
)

# ==== Subscription & RG ====
echo "Using subscription ID: $SUBSCRIPTION_ID"
az account set --subscription "$SUBSCRIPTION_ID"

echo "Creating resource group: $RESOURCE_GROUP (location: $LOCATION)"
az group create -n "$RESOURCE_GROUP" -l "$LOCATION" >/dev/null

# ==== Deploy Bicep (Search + Azure OpenAI with model deployment) ====
echo "Validating Bicep template..."
az deployment group validate \
  -g "$RESOURCE_GROUP" \
  -f infra/main.bicep \
  -p "${deployment_parameters[@]}" --only-show-errors >/dev/null

echo "Template validation succeeded. Applying deployment..."
az deployment group create \
  -g "$RESOURCE_GROUP" \
  -f infra/main.bicep \
  -p "${deployment_parameters[@]}" \
  -o json > .deploy-output.json

OPENAI_ENDPOINT=$(jq -r '.properties.outputs.openAiEndpoint.value' .deploy-output.json)
OPENAI_DEPLOYMENT=$(jq -r '.properties.outputs.openAiDeploymentName.value' .deploy-output.json)
SEARCH_ENDPOINT=$(jq -r '.properties.outputs.searchEndpoint.value' .deploy-output.json)

SEARCH_SERVICE_NAME=$(jq -r '.properties.outputs.searchResourceId.value' .deploy-output.json | awk -F/ '{print $NF}')
OPENAI_ACCOUNT_NAME=$(jq -r '.properties.outputs.openAiResourceId.value' .deploy-output.json | awk -F/ '{print $NF}')

echo "Fetching service keys securely..."
OPENAI_KEY=$(az cognitiveservices account keys list \
  --name "$OPENAI_ACCOUNT_NAME" \
  --resource-group "$RESOURCE_GROUP" \
  --query "key1" -o tsv)

SEARCH_KEY=$(az search admin-key show \
  --service-name "$SEARCH_SERVICE_NAME" \
  -g "$RESOURCE_GROUP" \
  --query "primaryKey" -o tsv)

# ==== Create .env file for the app ====
echo "Creating app/.env file with retrieved keys..."
mkdir -p app
cat > app/.env <<ENVEOF
# Generated by deploy.sh - do not commit
AZURE_OPENAI_ENDPOINT=$OPENAI_ENDPOINT
AZURE_OPENAI_API_KEY=$OPENAI_KEY
AZURE_OPENAI_API_VERSION=2024-10-21
AZURE_OPENAI_DEPLOYMENT=$OPENAI_DEPLOYMENT
AZURE_SEARCH_ENDPOINT=$SEARCH_ENDPOINT
AZURE_SEARCH_API_KEY=$SEARCH_KEY
SEARCH_INDEX_NAME=rag-demo-index
ENVEOF

echo "app/.env has been created with freshly retrieved keys."
